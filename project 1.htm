<html><head>
<title>INFO 3300 - Group Project 1</title>
<script src="https://d3js.org/d3.v5.min.js"></script>

<style>

  .gridlines line {
    stroke: #bbb;
  }

  .gridlines .domain {
    stroke: none;
  }

</style>

<h2>INFO 3300 - Project 1</h2>
<h3>Angela Chen (ac2689), Samantha Chu (sc2855)</h3>
<section>
<h3> Visualization 1: </h3>
<p id ="p1">
<script>
//(A) Visualization 1

// make a svg plot first
const svg = d3.select("svg#scatterplot");
const width = svg.attr("width");
const margin = {top: 10, right: 10, bottom: 50, left: 50};

const chartWidth = width - margin.left - margin.right;
const chartHeight = height - margin.top - margin.bottom;


let annotations = svg.append("g").attr("id","annotations");
                // No translate here since our annotations may be outside of the chart area

let chartArea = svg.append("g").attr("id","points")
                .attr("transform","translate("+margin.left+","+margin.top+")");

//import csv data
d3.csv("Manhattan Restaurant.csv", function(d){
  return{
    Name: d.Name,
    Cuisine_Category: d.Cuisine_Category,
    Cuisine: d.Cuisine,
    Score: +d.Score,
    Price: +d.Price,
  };
}).then(function(data){
  console.log(data[0]);
});


//build scatterplot for price and health score rating for each kind of cuisine restaurant in Manhattan.
// building the scales we need, price and score for each restaurant
const PriceExtent = d3.extent(data, d => d['Price']);
const PriceScale = d3.scaleLinear().domain(CuisineExtent).range([0, chartWidth]);

const ScoreExtent = d3.extent(data, d => d['Score']);
const ScoreScale = d3.scaleLog().domain(Extent).range([chartHeight, 0]);


//draw axes
let leftAxis = d3.axisLeft(ScoreScale)
                 .tickFormat(d3.format("$.0s"));
    svg.append("g")
       .attr("transform","translate("+(margins.left-10)+","+margins.top+")")
       .attr("class", "y axis")
       .call(leftAxis);

let leftGridlines = d3.axisLeft(ScoreScale)
                      .tickSize(-chartWidth-10)
                      .tickFormat("")
    svg.append("g")
       .attr("class", "y gridlines")
       .attr("transform","translate("+(margins.left-10)+","+margins.top+")")
       .call(leftGridlines);

let bottomAxis = d3.axisBottom(PriceScale)
                   .tickFormat(d3.format("$.1s"));
    svg.append("g")
       .attr("class", "x axis")
       .attr("transform","translate("+margins.left+","+(chartHeight+margins.top+10)+")")
       .call(bottomAxis)

let bottomGridlines = d3.axisLeft(PriceScale)
                      .tickSize(-chartWidth-10)
                      .tickFormat("")
    svg.append("g")
       .attr("class", "x gridlines")
       .attr("transform","translate("+margins.left+","+(chartHeight+margins.top+10)+")")
       .call(bottomGridlines);




</script>
</section>
</head>
</html>

confirmation code
405c
